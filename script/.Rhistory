#     newcol <- as.data.frame(rowSums(count[, c(xcols[i], ycols[i])]))
#     names(newcol) <- newcols[i]
#     count <- cbind(count, newcol)
#   }
#
#   count <- subset(count, select=newcols)
#
#   countsList[[length(countsList) + 1]] <- count
# }
#
# exon <- countsList[[1]]
# intron <- countsList[[2]]
#
# write.table(exon, file=glue("processed/ExonicCounts_{gse}.txt"), row.names=TRUE, col.names=TRUE, sep="\t")
# write.table(intron, file=glue("processed/IntronicCounts_{gse}.txt"), row.names=TRUE, col.names=TRUE, sep="\t")
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=seq.int(ncol(exon)),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene names
genes <- row.names(res)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- geneList[order(genes), ]
res$geneSymbol <- geneList[2]
# Save DESeq results table to output
deGenes <- res %>% as.data.frame() %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[3], type="apeglm")
# DESeq2 MA plot
MAplot <- DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}"))
MAplot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
require("knitr")
opts_knit$set(root.dir="/Users/Pomato/mrc/project/sita/")
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
# counts <- list(exon, intron)
# countsList <- list()
#
# for (count in counts) {
#   row.names(count) <- count[, 1]
#   count[, 1] <- NULL
#
#   xcols <- count %>% dplyr::select(contains(".x")) %>% colnames()
#   ycols <- count %>% dplyr::select(contains(".y")) %>% colnames()
#   newcols <- gsub("\\.x", "", xcols)
#
#   for (i in seq_along(newcols)) {
#     newcol <- as.data.frame(rowSums(count[, c(xcols[i], ycols[i])]))
#     names(newcol) <- newcols[i]
#     count <- cbind(count, newcol)
#   }
#
#   count <- subset(count, select=newcols)
#
#   countsList[[length(countsList) + 1]] <- count
# }
#
# exon <- countsList[[1]]
# intron <- countsList[[2]]
#
# write.table(exon, file=glue("processed/ExonicCounts_{gse}.txt"), row.names=TRUE, col.names=TRUE, sep="\t")
# write.table(intron, file=glue("processed/IntronicCounts_{gse}.txt"), row.names=TRUE, col.names=TRUE, sep="\t")
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/eisaDE_{gse}_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=seq.int(ncol(exon)),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene names
genes <- row.names(res)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- geneList[order(genes), ]
res$geneSymbol <- geneList[2]
# Save DESeq results table to output
deGenes <- res %>% as.data.frame() %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[3], type="apeglm")
# DESeq2 MA plot
MAplot <- DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}"))
MAplot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
gse <- "GSE109834"
conditions <- c("PBS", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
# counts <- list(exon, intron)
# countsList <- list()
#
# for (count in counts) {
#   row.names(count) <- count[, 1]
#   count[, 1] <- NULL
#
#   xcols <- count %>% dplyr::select(contains(".x")) %>% colnames()
#   ycols <- count %>% dplyr::select(contains(".y")) %>% colnames()
#   newcols <- gsub("\\.x", "", xcols)
#
#   for (i in seq_along(newcols)) {
#     newcol <- as.data.frame(rowSums(count[, c(xcols[i], ycols[i])]))
#     names(newcol) <- newcols[i]
#     count <- cbind(count, newcol)
#   }
#
#   count <- subset(count, select=newcols)
#
#   countsList[[length(countsList) + 1]] <- count
# }
#
# exon <- countsList[[1]]
# intron <- countsList[[2]]
#
# write.table(exon, file=glue("processed/ExonicCounts_{gse}.txt"), row.names=TRUE, col.names=TRUE, sep="\t")
# write.table(intron, file=glue("processed/IntronicCounts_{gse}.txt"), row.names=TRUE, col.names=TRUE, sep="\t")
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/eisaDE_{gse}_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=seq.int(ncol(exon)),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene names
genes <- row.names(res)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- geneList[order(genes), ]
res$geneSymbol <- geneList[2]
# Save DESeq results table to output
deGenes <- res %>% as.data.frame() %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[3], type="apeglm")
# DESeq2 MA plot
MAplot <- DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}"))
MAplot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
gse <- "GSE135753"
conditions <- c("NT", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/eisaDE_{gse}_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=seq.int(ncol(exon)),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene names
genes <- row.names(res)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- geneList[order(genes), ]
res$geneSymbol <- geneList[2]
# Save DESeq results table to output
deGenes <- res %>% as.data.frame() %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[3], type="apeglm")
# DESeq2 MA plot
MAplot <- DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}"))
MAplot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
ensembl_id_to_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- geneList[order(genes), ]
table$geneSymbol <- geneList[2]
return(table)
}
add_ensembl_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- geneList[order(genes), ]
table$geneSymbol <- geneList[2]
return(table)
}
geneList
geneList("ENSG00000186470")
geneList[ENSG00000186470]
geneList["ENSG00000186470"]
geneList["ENSG00000186470", ]
geneList
geneList["ENSG00000005471", ]
genes <- row.names(res)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- geneList[order(genes), ]
res$geneSymbol <- geneList[2]
res$geneSymbol
head(res)
geneList[geneList[, 1] == "ENSG00000000938", ]
geneList[geneList[, 1] == "ENSG00000186470", ]
head(genes)
head(geneList[2])
head(geneList)
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(tidyverse)
library(glue)
library(DESeq2)
library(biomaRt)
})
