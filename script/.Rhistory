library(biomaRt)
})
add_ensembl_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("WBGene", genes[1], fixed=TRUE)) {
ensembl <- useMart(biomart = "parasite_mart",
host = "https://parasite.wormbase.org",
port = 443)
ensemblDataset <- "wbps_gene"
symbol <- "external_gene_id"
filter <- "wbps_gene_id"
}
mart <- useDataset(ensemblDataset, ensembl)
geneList <- getBM(filters=filter,
attributes=c(filter, symbol),
values=genes,
mart=mart) %>% distinct(ensembl_gene_id, .keep_all=TRUE)
row.names(geneList) <- geneList[, 1]
geneList[, 1] <- NULL
table$geneSymbol <- geneList[, 1][match(rownames(table), rownames(geneList))]
newTable <- table
return(newTable)
}
format_condition <- function (colnames) {
replace <- c("_[0-9]*$", "_rep[0-9]*$", "^[A-Z]{3}[0-9]+_", "^[0-9]+_")
for (r in replace) {
colnames <- gsub(r, "", colnames)
}
return(colnames)
}
gse <- "GSE137028"
selectConditions <- c("WT_2m", "WT_4m") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
require("knitr")
opts_knit$set(root.dir="~/mrc/project/sita_eisa/")
gse <- "GSE137028"
selectConditions <- c("WT_2m", "WT_4m") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
if (!(file.exists(glue("processed/{gse}_PCA_exon.png")))) {
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
}
#### Filtering ####
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
332/22
gse <- "GSE137028"
selectConditions <- c("WT_2m", "WT_6m") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
if (!(file.exists(glue("processed/{gse}_PCA_exon.png")))) {
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
}
#### Filtering ####
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
37/3431
gse <- "GSE137028"
selectConditions <- c("WT_2m", "WT_9m") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
if (!(file.exists(glue("processed/{gse}_PCA_exon.png")))) {
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
}
#### Filtering ####
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
78/4
gse <- "GSE137028"
selectConditions <- c("WT_2m", "WT_12m") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
if (!(file.exists(glue("processed/{gse}_PCA_exon.png")))) {
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
}
#### Filtering ####
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
#### Parameters ####
gse <- "GSE47817"
selectConditions <- c("HSC_M04", "HSC_M24") # control vs. treatment
alpha <- 0.05
#### Load data ####
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
if (!(file.exists(glue("processed/{gse}_PCA_exon.png")))) {
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
}
#### Filtering ####
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
2/7
