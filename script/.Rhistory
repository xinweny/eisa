colData=colData,
design=~ condition)
}
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
gse <- "GSE109834"
conditions <- c("PBS", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
gse <- "GSE109834"
conditions <- c("PBS", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
dds
dds$condition
dataset$condition
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Set reference level
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
gse <- "GSE109834"
conditions <- c("PBS", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
gse <- "GSE135618"
conditions <- c("PBS_cells", "LPS_cells") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
gse <- "GSE135753"
conditions <- c("NT", "^LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
gse <- "GSE135753"
conditions <- c("NT", "^LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
head(exon)
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
colData
cond
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=unique(cond)))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
colData
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=unique(cond)))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', unique(cond)), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
gse <- "GSE135753"
selectConditions <- c("NT", "^LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=tail(resultsNames(dds), n=1), type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
conditions
