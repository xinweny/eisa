color="blue") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
resLFC
MAplot <- as.data.frame(resLFC) %>% ggplot(aes(x=baseMean, y=log2FoldChange)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="blue") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
MAplot <- ggplot(as.data.frame(resLFC), aes(x=baseMean, y=log2FoldChange)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="blue") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
resLFC
as.data.frame(resLFC)$baseMean
MAplot <- ggplot(as.data.frame(resLFC), aes(x=baseMean, y=log2FoldChange)) +
geom_point(color="lightgrey") +
geom_point(data=resLFC %>% filter(FDR < 0.05),
color="blue") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot <- ggplot(as.data.frame(resLFC), aes(x=baseMean, y=log2FoldChange)) +
geom_point(color="lightgrey") +
geom_point(data=as.data.frame(resLFC) %>% filter(FDR < 0.05),
color="blue") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot <- ggplot(as.data.frame(resLFC), aes(x=baseMean, y=log2FoldChange)) +
geom_point(color="lightgrey") +
geom_point(data=as.data.frame(resLFC) %>% filter(padj < 0.05),
color="blue") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(as.data.frame(resLFC), padj < 0.05 & log2FoldChange < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
MAplot <- DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}"))
MAplot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off(
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=factor(seq.int(ncol(exon)), levels=seq.int(ncol(exon))),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
colData
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=factor(seq.int(ncol(exon))),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
factor(seq.int(ncol(exon))
0
factor(seq.int(ncol(exon)))
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=seq.int(ncol(exon)),
condition=factor(cond, levels=conditions))
colData
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=sprintf("s%03d", seq.int(ncol(exon))),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
colData
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[3], type="apeglm")
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[2], type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
colnames(exon)
factor(gsub("*_","",colnames(exon)))
factor(gsub("+_","",colnames(exon)))
tail(colnames(exon), n=1)
factor(gsub("*_rep","",colnames(exon)))
gsub("*_rep","",colnames(exon))
gsub(".*_rep","",colnames(exon))
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=factor(gsub(".*_rep","",colnames(exon))),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[3], type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[2], type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
batch=factor(gsub(".*_rep","",colnames(exon))),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ batch + condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
## Visualisation
resLFC <- lfcShrink(dds, coef=resultsNames(dds)[3], type="apeglm")
# DESeq2 MA plot
png(glue("processed/DESeqMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nrow(filter(deGenes, padj < 0.05 & log2FoldChange > 0))}, DOWN={nrow(filter(deGenes, padj < 0.05 & log2FoldChange < 0))}")))
dev.off()
gse <- "GSE135753"
conditions <- c("NT", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/eisaDE_{gse}_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
gse <- "GSE135618"
conditions <- c("PBS_cells", "LPS_cells") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/eisaDE_{gse}_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
gse <- "GSE109834"
conditions <- c("PBS", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/eisaDE_{gse}_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))}, DOWN={nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/eisaDE_{gse}_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
gse <- "GSE12223262"
conditions <- c("Ctrl", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
gse <- "GSE123262"
conditions <- c("Ctrl", "LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
head(exon)
gse <- "GSE123262"
conditions <- c("Ctrl", "\ALPS") # control vs. treatment
gse <- "GSE123262"
conditions <- c("Ctrl", "\\ALPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(contains(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(contains(conditions)) %>% as.matrix()
head(exon)
gse <- "GSE123262"
conditions <- c("Ctrl", "\\ALPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
head(exon)
gse <- "GSE123262"
conditions <- c("Ctrl", "\ALPS") # control vs. treatment
gse <- "GSE123262"
conditions <- c("Ctrl", "^LPS") # control vs. treatment
exon <- read.table(glue("processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(conditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(conditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
