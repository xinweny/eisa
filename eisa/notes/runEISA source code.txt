function (cntEx, cntIn, cond, method = NULL, modelSamples = TRUE,     geneSelection = c("filterByExpr", "none", "Gaidatzis2015"),     statFramework = c("QLF", "LRT"), effects = c("predFC", "Gaidatzis2015"),     pscnt = 2, sizeFactor = c("exon", "intron", "individual"),     recalcNormFactAfterFilt = TRUE, recalcLibSizeAfterFilt = FALSE,     ...) {    if (is(cntEx, "SummarizedExperiment")) {        if (all(c("exon", "intron") %in% SummarizedExperiment::assayNames(cntEx))) {            cntIn <- SummarizedExperiment::assay(cntEx, "intron")            cntEx <- SummarizedExperiment::assay(cntEx, "exon")        }        else if (all(c("spliced", "unspliced") %in% SummarizedExperiment::assayNames(cntEx))) {            cntIn <- SummarizedExperiment::assay(cntEx, "unspliced")            cntEx <- SummarizedExperiment::assay(cntEx, "spliced")        }        else {            stop("'cntEx' needs to have assayNames 'intron'/'exon' or 'unspliced'/'spliced'.")        }    }    if (is.data.frame(cntEx))         cntEx <- as.matrix(cntEx)    if (is.data.frame(cntIn))         cntIn <- as.matrix(cntIn)    stopifnot(exprs = {        is.matrix(cntEx)        is.matrix(cntIn)    })    stopifnot(all(dim(cntEx) == dim(cntIn)))    nsmpls <- ncol(cntEx)    if (is.null(rownames(cntEx)))         rownames(cntEx) <- as.character(seq.int(nrow(cntEx)))    if (is.null(colnames(cntEx)))         colnames(cntEx) <- as.character(seq.int(nsmpls))    if (is.null(rownames(cntIn)))         rownames(cntIn) <- as.character(seq.int(nrow(cntIn)))    if (is.null(colnames(cntIn)))         colnames(cntIn) <- as.character(seq.int(ncol(cntIn)))    stopifnot(identical(dimnames(cntEx), dimnames(cntIn)))    if (is.numeric(cond) || is.character(cond))         cond <- factor(cond, levels = unique(cond))    geneSelection <- match.arg(geneSelection)    statFramework <- match.arg(statFramework)    effects <- match.arg(effects)    sizeFactor <- match.arg(sizeFactor)    stopifnot(exprs = {        is.factor(cond)        nlevels(cond) == 2L        length(cond) == nsmpls        is.null(method) || method %in% c("Gaidatzis2015")        is.logical(modelSamples)        length(modelSamples) == 1L        is.numeric(pscnt)        length(pscnt) == 1L    })    if (!is.null(method) && method == "Gaidatzis2015") {        message("setting parameters according to Gaidatzis et al., 2015")        modelSamples <- FALSE        geneSelection <- "Gaidatzis2015"        statFramework <- "LRT"        effects <- "Gaidatzis2015"        pscnt <- 8        sizeFactor <- "individual"        recalcNormFactAfterFilt <- TRUE        recalcLibSizeAfterFilt <- FALSE    }    fracIn <- colSums(cntIn)/(colSums(cntEx) + colSums(cntIn))    cnt <- data.frame(Ex = cntEx, In = cntIn)    y <- edgeR::DGEList(counts = cnt, ...)    y$samples$norm.factors.exons <- rep(edgeR::calcNormFactors(cntEx),         2)    y$samples$norm.factors.introns <- rep(edgeR::calcNormFactors(cntIn),         2)    y$samples$norm.factors.individual <- edgeR::calcNormFactors(y$counts)    y$samples$lib.size.exons <- rep(colSums(cntEx), 2)    y$samples$lib.size.introns <- rep(colSums(cntIn), 2)    y$samples$lib.size.individual <- colSums(y$counts)    cond2 <- rep(cond, 2L)    region <- factor(rep(c("ex", "in"), each = nsmpls), levels = c("in",         "ex"))    smpl <- factor(rep(sprintf("s%03d", seq.int(nsmpls)), 2))    if (modelSamples) {        dsgn <- model.matrix(~smpl)        c1.ex <- cond2 == levels(cond2)[1] & region == "ex"        c2.ex <- cond2 == levels(cond2)[2] & region == "ex"        dsgn <- cbind(dsgn, c1.ex, c2.ex)    }    else {        dsgn <- model.matrix(~region * cond2)    }    rownames(dsgn) <- colnames(cnt)    y$samples$norm.factors <- y$samples$norm.factors.individual    y$samples$lib.size <- y$samples$lib.size.individual    if (geneSelection == "none") {        message("skip filtering for quantifyable genes")        NLex <- edgeR::cpm(y[, seq.int(nsmpls)], log = TRUE,             prior.count = pscnt)        NLin <- edgeR::cpm(y[, nsmpls + seq.int(nsmpls)], log = TRUE,             prior.count = pscnt)    }    else {        message("filtering quantifyable genes...", appendLF = FALSE)        if (geneSelection == "filterByExpr") {            quantGenes <- rownames(cntEx)[edgeR::filterByExpr(y[,                 seq.int(nsmpls)], design = dsgn[seq.int(nsmpls),                 ]) & edgeR::filterByExpr(y[, nsmpls + seq.int(nsmpls)],                 design = dsgn[nsmpls + seq.int(nsmpls), ])]            NLex <- edgeR::cpm(y[, seq.int(nsmpls)], log = TRUE,                 prior.count = pscnt)            NLin <- edgeR::cpm(y[, nsmpls + seq.int(nsmpls)],                 log = TRUE, prior.count = pscnt)        }        else if (geneSelection == "Gaidatzis2015") {            Nex <- t(t(cntEx)/colSums(cntEx) * mean(colSums(cntEx)))            Nin <- t(t(cntIn)/colSums(cntIn) * mean(colSums(cntIn)))            if (pscnt != 8)                 warning("Using a 'pscnt' different from 8 deviates from geneSelection='Gaidatzis2015'")            NLex <- log2(Nex + pscnt)            NLin <- log2(Nin + pscnt)            quantGenes <- rownames(cntEx)[rowMeans(NLex) > 5 &                 rowMeans(NLin) > 5]        }        message("keeping ", length(quantGenes), " from ", nrow(y),             " (", round(length(quantGenes) * 100/nrow(y), 1),             "%)")        y <- y[quantGenes, ]        if (recalcNormFactAfterFilt) {            y$samples$norm.factors.exons <- rep(edgeR::calcNormFactors(y$counts[,                 seq.int(nsmpls)]), 2)            y$samples$norm.factors.introns <- rep(edgeR::calcNormFactors(y$counts[,                 nsmpls + seq.int(nsmpls)]), 2)            y$samples$norm.factors.individual <- edgeR::calcNormFactors(y$counts)        }        if (recalcLibSizeAfterFilt) {            y$samples$lib.size.exons <- rep(colSums(y$counts[,                 seq.int(nsmpls)]), 2)            y$samples$lib.size.introns <- rep(colSums(y$counts[,                 nsmpls + seq.int(nsmpls)]), 2)            y$samples$lib.size.individual <- colSums(y$counts)        }        NLex <- NLex[quantGenes, ]        NLin <- NLin[quantGenes, ]    }    if (sizeFactor == "exon") {        y$samples$lib.size <- y$samples$lib.size.exons        y$samples$norm.factors <- y$samples$norm.factors.exons    }    else if (sizeFactor == "intron") {        y$samples$lib.size <- y$samples$lib.size.introns        y$samples$norm.factors <- y$samples$norm.factors.introns    }    else {        y$samples$lib.size <- y$samples$lib.size.individual        y$samples$norm.factors <- y$samples$norm.factors.individual    }    if (any(table(cond) < 2)) {        warning("Need at least two replicates per condition to perform ",             "statistical analysis. 'ExIn' result will be empty.")        tt.ExIn <- list(table = data.frame())        contr <- NULL    }    else {        message("fitting statistical model...", appendLF = FALSE)        y <- edgeR::estimateDisp(y, dsgn)        if (modelSamples) {            contr <- (colnames(dsgn) == "c2.ex") - (colnames(dsgn) ==                 "c1.ex")        }        else {            contr <- as.numeric(colnames(dsgn) == colnames(dsgn)[ncol(dsgn)])        }        if (statFramework == "QLF") {            fit <- edgeR::glmQLFit(y, dsgn)            tst.ExIn <- edgeR::glmQLFTest(fit, contrast = contr)        }        else if (statFramework == "LRT") {            fit <- edgeR::glmFit(y, dsgn)            tst.ExIn <- edgeR::glmLRT(fit, contrast = contr)        }        tt.ExIn <- edgeR::topTags(tst.ExIn, n = nrow(y), sort.by = "none")        message("done")    }    message("calculating log-fold changes...", appendLF = FALSE)    contrastName <- paste(levels(cond)[2], "-", levels(cond)[1])    if (effects == "predFC") {        if (is.null(y$common.dispersion))             stop("effects='predFC' requires a fitted model - rerun with effects='Gaidatzis2015'")        lfc <- edgeR::predFC(y, dsgn, prior.count = pscnt)        if (modelSamples) {            rownames(lfc) <- rownames(y)            Din <- rowMeans(lfc[, colnames(lfc) %in% paste0("smpl",                 smpl[cond2 == levels(cond2)[2]]), drop = FALSE]) -                 rowMeans(lfc[, colnames(lfc) %in% paste0("smpl",                   smpl[cond2 == levels(cond2)[1]]), drop = FALSE])            Dex.Din <- lfc[, "c2.ex"] - lfc[, "c1.ex"]            Dex <- Din + Dex.Din        }        else {            rownames(lfc) <- rownames(y)            Dex <- rowSums(lfc[, c(3, 4)])            Din <- lfc[, 3]            Dex.Din <- lfc[, ncol(lfc)]        }    }    else if (effects == "Gaidatzis2015") {        i1 <- which(cond == levels(cond)[1])        i2 <- which(cond == levels(cond)[2])        Dex <- rowMeans(NLex[, i2, drop = FALSE]) - rowMeans(NLex[,             i1, drop = FALSE])        Din <- rowMeans(NLin[, i2, drop = FALSE]) - rowMeans(NLin[,             i1, drop = FALSE])        Dex.Din <- Dex - Din    }    message("done")    return(list(fracIn = fracIn, contrastName = contrastName,         contrasts = cbind(Dex = Dex, Din = Din, Dex.Din = Dex.Din),         DGEList = y, tab.ExIn = tt.ExIn$table, contr.ExIn = contr,         designMatrix = dsgn, params = list(method = method, modelSamples = modelSamples,             geneSelection = geneSelection, statFramework = statFramework,             effects = effects, pscnt = pscnt, sizeFactor = sizeFactor)))}<bytecode: 0x7f937e1155b8><environment: namespace:eisaR>