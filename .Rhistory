"CHR_HG1311_PATCH",
"CHR_HG1320_PATCH",
"CHR_HG1342_HG2282_PATCH",
"CHR_HG1362_PATCH",
"CHR_HG1384_PATCH",
"CHR_HG1395_PATCH",
"CHR_HG1398_PATCH",
"CHR_HG142_HG150_NOVEL_TEST",
"CHR_HG1445_PATCH",
"CHR_HG1466_PATCH",
"CHR_HG1485_PATCH",
"CHR_HG1506_PATCH",
"CHR_HG1507_PATCH",
"CHR_HG1509_PATCH",
"CHR_HG151_NOVEL_TEST",
"CHR_HG1521_PATCH",
"CHR_HG1523_PATCH",
"CHR_HG1524_PATCH",
"CHR_HG1531_PATCH",
"CHR_HG1535_PATCH",
"CHR_HG1651_PATCH",
"CHR_HG1708_PATCH",
"CHR_HG1815_PATCH",
"CHR_HG1817_1_PATCH",
"CHR_HG1832_PATCH",
"CHR_HG1_PATCH",
"CHR_HG2002_PATCH",
"CHR_HG2021_PATCH",
"CHR_HG2022_PATCH",
"CHR_HG2023_PATCH",
"CHR_HG2030_PATCH",
"CHR_HG2046_PATCH",
"CHR_HG2047_PATCH",
"CHR_HG2057_PATCH",
"CHR_HG2058_PATCH",
"CHR_HG2060_PATCH",
"CHR_HG2062_PATCH",
"CHR_HG2063_PATCH",
"CHR_HG2066_PATCH",
"CHR_HG2067_PATCH",
"CHR_HG2068_PATCH",
"CHR_HG2072_PATCH",
"CHR_HG2087_PATCH")
seqlevels(txdb) <- seqlevels("txdb")[!seqlevels("txdb") %in% excludedChrom]
seqlevels(txdb) <- seqlevels(txdb)[!seqlevels(txdb) %in% excludedChrom]
seqlevels(txdb)
[!seqlevels(txdb) %in% excludedChrom]
!seqlevels(txdb) %in% excludedChrom
!excludedChrom %in% seqlevels(txdb)
!seqlevels(txdb) %in% excludedChrom
sum(!excludedChrom %in% seqlevels(txdb))
length(seqlevels(txdb))
length(seqlevels(txdb)[!seqlevels(txdb) %in% excludedChrom])
!(seqlevels(txdb) %in% excludedChrom)
length(seqlevels(txdb)[!(seqlevels(txdb) %in% excludedChrom)])
#### Packages ####
library(GenomicFeatures)
txdb <- makeTxDbFromEnsembl(organism="Homo sapiens",
release=89,
circ_seqs=NULL,
server="ensembldb.ensembl.org",
username="anonymous", password=NULL, port=0L,
tx_attrib=NULL)
length(seqlength(txcdb))
length(seqlength(txdb))
length(seqlengths(txdb))
1:23
chroms <- c(1:22, "X", "Y")
chroms <- paste("chr", chroms, sep="")
chroms
#### Packages ####
suppressPackageStartupMessages({
library(QuasR)
library(eisaR)
library(GenomicFeatures)
library(argparser)
library(AnnotationDbi)
library(glue)
})
glue
glue::glue()
help(message)
c("a", "b", "c")[1]
c("a", "b", "c")[2]
test <- "Reading reference gene model /rds/project/rs2099/rds-rs2099-toxgenomics/shared/mouse/mm10_Gencode_VM18.bed ... Done
Loading SAM/BAM file ...  Total 200000 usable reads were sampled
This is SingleEnd Data
Fraction of reads failed to determine: 0.0636
Fraction of reads explained by "++,--": 0.4685
Fraction of reads explained by "+-,-+": 0.4678"
test <- 'Reading reference gene model /rds/project/rs2099/rds-rs2099-toxgenomics/shared/mouse/mm10_Gencode_VM18.bed ... Done
Loading SAM/BAM file ...  Total 200000 usable reads were sampled
This is SingleEnd Data
Fraction of reads failed to determine: 0.0636
Fraction of reads explained by "++,--": 0.4685
Fraction of reads explained by "+-,-+": 0.4678'
test <- '
This is SingleEnd Data
Fraction of reads failed to determine: 0.0636
Fraction of reads explained by "++,--": 0.4685
Fraction of reads explained by "+-,-+": 0.4678'
test
suppressPackageStartupMessages({
library(QuasR)
library(eisaR)
library(GenomicFeatures)
library(argparser)
library(AnnotationDbi)
library(stringr)
})
strsplit(test, "\n")
strsplit(test, "\n", simplify=TRUE)
strsplit(test, "\n")
strsplit(test, "\n")[4]
strsplit(test, "\n")[[1]][4]
strsplit(strsplit(test, "\n")[[1]][4], " ")
tail(strsplit(strsplit(test, "\n")[[1]][4], " ")[[1]], n=1)
glue()
glue:glue()
glue::glue()
#### Packages ####
suppressPackageStartupMessages({
library(QuasR)
library(eisaR)
library(GenomicFeatures)
library(argparser)
library(AnnotationDbi)
library(glue)
})
glue()
message("hi")
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
library(glue)
library(DESeq2)
library(knitr)
})
setwd("/Users/Pomato/mrc/project/sita/")
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
library(glue)
library(DESeq2)
library(knitr)
})
root.dir("/Users/Pomato/mrc/project/sita/")
require("knitr")
opts_knit$set(root.dir="/Users/Pomato/mrc/project/sita/")
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
library(glue)
library(DESeq2)
})
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
require("knitr")
opts_knit$set(root.dir="/Users/Pomato/mrc/project/sita/")
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
})
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
})
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
require("knitr")
opts_knit$set(root.dir="/Users/Pomato/mrc/project/sita/")
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
})
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{conditions[1]} vs. {conditions[2]}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"))
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{conditions[1]} vs. {conditions[2]}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"))
MAplot
# Save output
png(glue("processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
dds <- dds[rowSums(counts(dds)) >= 10, ] # pre-filter genes with very low counts
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ] # order by adjusted p-value
message("No. of significant DE genes: ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with very low counts
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ] # order by adjusted p-value
message("No. of significant DE genes (FDR < 0.05): ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with very low counts
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ] # order by adjusted p-value
message("No. of significant DE genes (FDR < 0.05): ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
View(dds)
View(dataset)
View(dataset)
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with very low counts
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ] # order by adjusted p-value
message("No. of significant DE genes (FDR < 0.05): ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ] # order by adjusted p-value
message("No. of significant DE genes (FDR < 0.05): ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
library(glue)
library(DESeq2)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
#### EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{conditions[1]} vs. {conditions[2]}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"))
# Save output
png(glue("./processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
#### DESeq2 ####
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ] # order by adjusted p-value
message("No. of significant DE genes: ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
message("No. of significant DE genes (FDR < 0.05): ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
result <- result[order(result$padj), ] # order by adjusted p-value
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions), alpha=0.05)
result <- result[complete.cases(result), ] # remove any rows with NA
message("No. of significant DE genes (FDR < 0.05): ", sum(result$padj < 0.05, na.rm=TRUE))
# Save DESeq results table to output
result <- result[order(result$padj), ] # order by adjusted p-value
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
DESeq2::plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
