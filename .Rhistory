This is SingleEnd Data
Fraction of reads failed to determine: 0.0636
Fraction of reads explained by "++,--": 0.4685
Fraction of reads explained by "+-,-+": 0.4678'
test
suppressPackageStartupMessages({
library(QuasR)
library(eisaR)
library(GenomicFeatures)
library(argparser)
library(AnnotationDbi)
library(stringr)
})
strsplit(test, "\n")
strsplit(test, "\n", simplify=TRUE)
strsplit(test, "\n")
strsplit(test, "\n")[4]
strsplit(test, "\n")[[1]][4]
strsplit(strsplit(test, "\n")[[1]][4], " ")
tail(strsplit(strsplit(test, "\n")[[1]][4], " ")[[1]], n=1)
glue()
glue:glue()
glue::glue()
#### Packages ####
suppressPackageStartupMessages({
library(QuasR)
library(eisaR)
library(GenomicFeatures)
library(argparser)
library(AnnotationDbi)
library(glue)
})
glue()
message("hi")
table <- read.table(glue("./processed/ExonicCounts_GSE108770.txt"), header=TRUE, sep="\t", row.names=1)
library(glue)
table <- read.table(glue("./processed/ExonicCounts_GSE108770.txt"), header=TRUE, sep="\t", row.names=1)
pwd
getwe()
getwd()
table <- read.table(glue("/../processed/ExonicCounts_GSE108770.txt"), header=TRUE, sep="\t", row.names=1)
table <- read.table(glue("../processed/ExonicCounts_GSE108770.txt"), header=TRUE, sep="\t", row.names=1)
#### Packages ####
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(dplyr)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Load data ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP")
countData <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
selectedCountData <- countData %>% select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(selectedCountData))
colData <- data.frame(row.names=colnames(selectedCountData),
condition=factor(cond, levels=conditions))
#### Run DESeq2 ####
dataset <- DESeqDataSetFromMatrix(countData=selectedCountData,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
#### Analyse results ####
# Top X DE genes
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
result
head(result)
result <- result[order(result$padj)]
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
#### Analyse results ####
result <- result[order(result$padj), ]
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
head(result)
#### Packages ####
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(dplyr)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Load data ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP")
countData <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
selectedCountData <- countData %>% select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(selectedCountData))
colData <- data.frame(row.names=colnames(selectedCountData),
condition=factor(cond, levels=conditions))
#### Run DESeq2 ####
dataset <- DESeqDataSetFromMatrix(countData=selectedCountData,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
#### Analyse results ####
result <- result[order(result$padj), ]
write.table(result,
file=glue("processed/DESeq_{gse}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
library(glue)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
#### EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{conditions[1]} vs. {conditions[2]}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"))
# Save output
png(glue("./processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
#### DESeq2 ####
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ]
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
library(glue)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
#### EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{conditions[1]} vs. {conditions[2]}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"))
# Save output
png(glue("./processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
#### DESeq2 ####
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ]
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
View(exon)
View(exon)
colData
result
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
result <- result[order(result$padj), ] # order by adjusted p-value
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# DESeq2 MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
head(result)
#### Packages ####
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(dplyr)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Load data ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP")
countData <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
selectedCountData <- countData %>% select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(selectedCountData))
colData <- data.frame(row.names=colnames(selectedCountData),
condition=factor(cond, levels=conditions))
#### Run DESeq2 ####
dataset <- DESeqDataSetFromMatrix(countData=selectedCountData,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
#### Analyse results ####
result <- result[order(result$padj), ]
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
#### Packages ####
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(dplyr)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Load data ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP")
countData <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
selectedCountData <- countData %>% select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(selectedCountData))
colData <- data.frame(row.names=colnames(selectedCountData),
condition=factor(cond, levels=conditions))
#### Run DESeq2 ####
dataset <- DESeqDataSetFromMatrix(countData=selectedCountData,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
#### Analyse results ####
# Top X DE genes
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
cond
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
# DESeq2 MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
clear all
rm(list=ls())
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
library(glue)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table(glue("./processed/IntronicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains(conditions)) %>% as.matrix()
intron <- intron %>% select(contains(conditions)) %>% as.matrix()
#### EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format and select conditions for each sample
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{conditions[1]} vs. {conditions[2]}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"))
# Save output
png(glue("./processed/eisaMAplot_{gse}_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
#### DESeq2 ####
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design= ~ condition)
# Run DESeq
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
# DESeq2 MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
result <- result[order(result$padj), ] # order by adjusted p-value
write.table(result,
file=glue("processed/DESeq_{gse}_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
#### Packages ####
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(dplyr)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Load data ####
gse <- "GSE103719"
conditions <- c("DMSO", "THAP")
countData <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
selectedCountData <- countData %>% select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(selectedCountData))
colData <- data.frame(row.names=colnames(selectedCountData),
condition=factor(cond, levels=conditions))
#### Run DESeq2 ####
dataset <- DESeqDataSetFromMatrix(countData=selectedCountData,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
#### Analyse results ####
# Top X DE genes
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
View(MAplot)
View(exon)
View(exon)
#### Packages ####
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(dplyr)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Load data ####
gse <- "GSE109834"
conditions <- c("PBS", "LPS")
countData <- read.table(glue("./processed/ExonicCounts_{gse}.txt"), header=TRUE, sep="\t", row.names=1)
selectedCountData <- countData %>% select(contains(conditions)) %>% as.matrix()
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(selectedCountData))
colData <- data.frame(row.names=colnames(selectedCountData),
condition=factor(cond, levels=conditions))
#### Run DESeq2 ####
dataset <- DESeqDataSetFromMatrix(countData=selectedCountData,
colData=colData,
design= ~ condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition', conditions))
result <- result[complete.cases(result), ] # remove any rows with NA
#### Analyse results ####
# Top X DE genes
# MA plot
plotMA(result, main=glue("{conditions[1]} vs. {conditions[2]}"))
cond
countData
head(countData)
plotMA(result)
head(result)
