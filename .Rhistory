stopifnot(all(colnames(exonsh) == colnames(intronsh)))
nGenes <- c()
for (bool in c(FALSE, TRUE)) {
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=bool,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
sigGenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
nGenes <- append(nGenes, sigGenes)
}
diff <- nGenes[2] - nGenes[1]
gseSens[[gse]] <- diff
}
gseSens
#### Packages ####
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
gseCond <- list(GSE97744=c("non.polarized", "IFNg.LPS"),
GSE103719=c("DMSO", "THAP"),
GSE109834=c("PBS", "LPS"),
GSE120807=c("unstimulated", "^LPS"),
GSE135618=c("PBS_cells", "LPS_cells"),
GSE135753=c("NT", "^LPS"))
gseSens <- list()
#### Checks ####
# Sensitivity analysis of EISA
for (gse in names(gseCond)) {
message("Sensitivity analysis of ", gse)
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
conditions <- unique(cond)
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
nGenes <- c()
for (bool in c(FALSE, TRUE)) {
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=bool,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
sigGenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
nGenes <- append(nGenes, sigGenes)
}
diff <- nGenes[2] - nGenes[1]
statement <- glue("{diff} genes from {nGenes[1]} -> {nGenes[2]} (Δ{diff/nGenes[1]}%)")
gseSens[[gse]] <- diff
}
#### Downstream analysis ####
gseSens
#### Packages ####
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
gseCond <- list(GSE97744=c("non.polarized", "IFNg.LPS"),
GSE103719=c("DMSO", "THAP"),
GSE109834=c("PBS", "LPS"),
GSE120807=c("unstimulated", "^LPS"),
GSE135618=c("PBS_cells", "LPS_cells"),
GSE135753=c("NT", "^LPS"))
gseSens <- list()
#### Checks ####
# Sensitivity analysis of EISA
for (gse in names(gseCond)) {
message("Sensitivity analysis of ", gse)
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
conditions <- unique(cond)
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
nGenes <- c()
for (bool in c(FALSE, TRUE)) {
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=bool,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
sigGenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
nGenes <- append(nGenes, sigGenes)
}
diff <- nGenes[2] - nGenes[1]
statement <- glue("{diff} genes from {nGenes[1]} -> {nGenes[2]} (Δ{diff/nGenes[1]}%)")
gseSens[[gse]] <- statement
}
gseSens
#### Packages ####
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
gseCond <- list(GSE97744=c("non.polarized", "IFNg.LPS"),
GSE103719=c("DMSO", "THAP"),
GSE109834=c("PBS", "LPS"),
GSE120807=c("unstimulated", "^LPS"),
GSE135618=c("PBS_cells", "LPS_cells"),
GSE135753=c("NT", "^LPS"))
gseSens <- list()
#### Checks ####
# Sensitivity analysis of EISA
for (gse in names(gseCond)) {
message("Sensitivity analysis of ", gse)
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
conditions <- unique(cond)
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
nGenes <- c()
for (bool in c(FALSE, TRUE)) {
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=bool,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
sigGenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
nGenes <- append(nGenes, sigGenes)
}
diff <- nGenes[2] - nGenes[1]
statement <- glue("{diff} genes from {nGenes[1]} -> {nGenes[2]} (Δ {diff / nGenes[1] * 100}%)")
gseSens[[gse]] <- statement
}
#### Downstream analysis ####
#### Packages ####
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
gseCond <- list(GSE97744=c("non.polarized", "IFNg.LPS"),
GSE103719=c("DMSO", "THAP"),
GSE109834=c("PBS", "LPS"),
GSE120807=c("unstimulated", "^LPS"),
GSE135618=c("PBS_cells", "LPS_cells"),
GSE135753=c("NT", "^LPS"))
gseSens <- list()
#### Checks ####
# Sensitivity analysis of EISA
for (gse in names(gseCond)) {
message("Sensitivity analysis of ", gse)
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
conditions <- unique(cond)
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
nGenes <- c()
for (bool in c(FALSE, TRUE)) {
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=bool,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
sigGenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
nGenes <- append(nGenes, sigGenes)
}
diff <- nGenes[2] - nGenes[1]
percent <- round(diff / nGenes[1] * 100, digits=2)
statement <- glue("{diff} genes from {nGenes[1]} -> {nGenes[2]} (Δ {}%)")
gseSens[[gse]] <- statement
}
#### Downstream analysis ####
#### Packages ####
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
gseCond <- list(GSE97744=c("non.polarized", "IFNg.LPS"),
GSE103719=c("DMSO", "THAP"),
GSE109834=c("PBS", "LPS"),
GSE120807=c("unstimulated", "^LPS"),
GSE135618=c("PBS_cells", "LPS_cells"),
GSE135753=c("NT", "^LPS"))
gseSens <- list()
#### Checks ####
# Sensitivity analysis of EISA
for (gse in names(gseCond)) {
message("Sensitivity analysis of ", gse)
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(gseCond[[gse]])) %>% as.matrix()
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
cond <- gsub("_rep[0-9]*.*", "", colnames(exonsh))
conditions <- unique(cond)
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
nGenes <- c()
for (bool in c(FALSE, TRUE)) {
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=bool,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
sigGenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
nGenes <- append(nGenes, sigGenes)
}
diff <- nGenes[2] - nGenes[1]
percent <- round(diff / nGenes[1] * 100, digits=2)
statement <- glue("{diff} genes from {nGenes[1]} -> {nGenes[2]} (Δ {percent}%)")
gseSens[[gse]] <- statement
}
#### Downstream analysis ####
gseSens
require("knitr")
opts_knit$set(root.dir="/Users/Pomato/mrc/project/sita/")
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
library(biomaRt)
})
require("knitr")
opts_knit$set(root.dir="/Users/Pomato/mrc/project/sita/")
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
library(biomaRt)
})
add_ensembl_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
row.names(geneList) <- geneList[, 1]
geneList[, 1] <- NULL
table$geneSymbol <- geneList[, 1][match(rownames(table), rownames(geneList))]
newTable <- table
return(newTable)
}
gse <- "GSE120807"
selectConditions <- c("unstimulated", "^LPS") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
gse <- "GSE97744"
selectConditions <- c("non.polarized", "IFNg.LPS") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
# Add gene symbol
gse <- "GSE135618"
selectConditions <- c("PBS_cells", "LPS_cells") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
gse <- "GSE103719"
selectConditions <- c("DMSO", "THAP") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Paired samples
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
gse <- "GSE109834"
selectConditions <- c("PBS", "LPS") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
gse <- "GSE135753"
selectConditions <- c("NT", "^LPS") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
paired <- FALSE
# Make column metadata
cond <- gsub("_rep[0-9]*.*", "", colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
## Run DESeq
dds <- DESeq(dataset)
res <- results(dds, contrast=c('condition', conditions), alpha=0.05)
res <- res[complete.cases(res), ] # remove any rows with NA
summary(res)
message("No. of significant DE genes (FDR < 0.05): ", sum(res$padj < 0.05, na.rm=TRUE))
