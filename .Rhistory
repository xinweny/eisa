intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message("No. of significant DE genes (FDR < 0.05): ", nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
paired <- FALSE # Paired samples
alpha <- 0.05
lfcThresh <- 0
# Make column metadata
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Make DESeq2 dataset
dds <- DESeq(dataset)
coef <- tail(resultsNames(dds), n=1)
# Heatmap
# vst <- vst(dds, blind=TRUE)
# png(glue("processed/{gse}_DESeqheatmap_{conditions[1]}.{conditions[2]}.png"))
# print(pheatmap(cor(assay(vst))))
# dev.off()
# Run DESeq2
res <- results(dds, name=coef,
alpha=alpha,
lfcThreshold=lfcThresh,
altHypothesis='greaterAbs',
pAdjustMethod='BH')
resLFC <- lfcShrink(dds, coef=coef, res=res)
summary(res)
message(glue("No. of significant DE genes (FDR < {alpha}): "), sum(resLFC$padj < alpha, na.rm=TRUE))
# Add gene symbol
resLFC <- add_ensembl_symbol(resLFC)
# Save DESeq results table to output
deGenes <- as.data.frame(resLFC) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{gse}_DESeq_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(deGenes, padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(deGenes, padj < alpha & log2FoldChange < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
## Visualisation
resLFC <- resLFC[order(-resLFC$padj),]
# DESeq2 MA plot
DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}"))
png(glue("processed/{gse}_DESeqMAplot_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}")))
dev.off()
570/328
gse <- "GSE154428"
selectConditions <- c("WT_ABX", "FAD_ABX") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message("No. of significant DE genes (FDR < 0.05): ", nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
paired <- FALSE # Paired samples
alpha <- 0.05
lfcThresh <- 0
# Make column metadata
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Make DESeq2 dataset
dds <- DESeq(dataset)
coef <- tail(resultsNames(dds), n=1)
# Heatmap
# vst <- vst(dds, blind=TRUE)
# png(glue("processed/{gse}_DESeqheatmap_{conditions[1]}.{conditions[2]}.png"))
# print(pheatmap(cor(assay(vst))))
# dev.off()
# Run DESeq2
res <- results(dds, name=coef,
alpha=alpha,
lfcThreshold=lfcThresh,
altHypothesis='greaterAbs',
pAdjustMethod='BH')
resLFC <- lfcShrink(dds, coef=coef, res=res)
summary(res)
message(glue("No. of significant DE genes (FDR < {alpha}): "), sum(resLFC$padj < alpha, na.rm=TRUE))
# Add gene symbol
resLFC <- add_ensembl_symbol(resLFC)
# Save DESeq results table to output
deGenes <- as.data.frame(resLFC) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{gse}_DESeq_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(deGenes, padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(deGenes, padj < alpha & log2FoldChange < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
## Visualisation
resLFC <- resLFC[order(-resLFC$padj),]
# DESeq2 MA plot
DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}"))
png(glue("processed/{gse}_DESeqMAplot_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}")))
dev.off()
608/298
gse <- "GSE139592"
selectConditions <- c("wt_none", "wt_LPS") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message("No. of significant DE genes (FDR < 0.05): ", nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
42/161
paired <- FALSE # Paired samples
alpha <- 0.05
lfcThresh <- 0
# Make column metadata
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Make DESeq2 dataset
dds <- DESeq(dataset)
coef <- tail(resultsNames(dds), n=1)
# Heatmap
# vst <- vst(dds, blind=TRUE)
# png(glue("processed/{gse}_DESeqheatmap_{conditions[1]}.{conditions[2]}.png"))
# print(pheatmap(cor(assay(vst))))
# dev.off()
# Run DESeq2
res <- results(dds, name=coef,
alpha=alpha,
lfcThreshold=lfcThresh,
altHypothesis='greaterAbs',
pAdjustMethod='BH')
resLFC <- lfcShrink(dds, coef=coef, res=res)
summary(res)
message(glue("No. of significant DE genes (FDR < {alpha}): "), sum(resLFC$padj < alpha, na.rm=TRUE))
# Add gene symbol
resLFC <- add_ensembl_symbol(resLFC)
# Save DESeq results table to output
deGenes <- as.data.frame(resLFC) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{gse}_DESeq_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(deGenes, padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(deGenes, padj < alpha & log2FoldChange < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
## Visualisation
resLFC <- resLFC[order(-resLFC$padj),]
# DESeq2 MA plot
DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}"))
png(glue("processed/{gse}_DESeqMAplot_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}")))
dev.off()
915/888
gse <- "GSE139592"
selectConditions <- c("Abca7_none", "Abca7_LPS") # control vs. treatment
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message("No. of significant DE genes (FDR < 0.05): ", nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < 0.05 & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE)
40/67
paired <- FALSE # Paired samples
alpha <- 0.05
lfcThresh <- 0
# Make column metadata
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Make DESeq2 dataset
dds <- DESeq(dataset)
coef <- tail(resultsNames(dds), n=1)
# Heatmap
# vst <- vst(dds, blind=TRUE)
# png(glue("processed/{gse}_DESeqheatmap_{conditions[1]}.{conditions[2]}.png"))
# print(pheatmap(cor(assay(vst))))
# dev.off()
# Run DESeq2
res <- results(dds, name=coef,
alpha=alpha,
lfcThreshold=lfcThresh,
altHypothesis='greaterAbs',
pAdjustMethod='BH')
resLFC <- lfcShrink(dds, coef=coef, res=res)
summary(res)
message(glue("No. of significant DE genes (FDR < {alpha}): "), sum(resLFC$padj < alpha, na.rm=TRUE))
# Add gene symbol
resLFC <- add_ensembl_symbol(resLFC)
# Save DESeq results table to output
deGenes <- as.data.frame(resLFC) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{gse}_DESeq_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t")
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(deGenes, padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(deGenes, padj < alpha & log2FoldChange < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
## Visualisation
resLFC <- resLFC[order(-resLFC$padj),]
# DESeq2 MA plot
DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}"))
png(glue("processed/{gse}_DESeqMAplot_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(resLFC, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}")))
dev.off()
637/589
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
source('~/mrc/project/sita_eisa/script/further_analysis.R')
library(ggplot2)
grid.arrange(pcaExon, pcaIntron,
nrow=1)
library(gridExtra)
grid.arrange(pcaExon, pcaIntron,
nrow=1)
pcaExon <- plotPCA(exonRld) + ggtitle("Exon")
pcaIntron <- plotPCA(intronRld) + ggtitle("Intron")
grid.arrange(pcaExon, pcaIntron,
nrow=1)
source('~/mrc/project/sita_eisa/script/further_analysis.R')
heatmapExon <- pheatmap(cor(assay(exonRld)), main="Exon")
heatmapIntron <- pheatmap(cor(assay(intronRld)), main="Intron")
grid.arrange(heatmapExon, heatmapIntron,
nrow=1)
source('~/mrc/project/sita_eisa/script/further_analysis.R')
