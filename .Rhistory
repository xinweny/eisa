#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
exon <- read.table("../processed/ExonicCounts_THAP_HEK_barbara.txt", header=TRUE, sep=" ", row.names=1) # args$e
intron <- read.table("../processed/IntronicCounts_THAP_HEK_barbara.txt", header=TRUE, sep=" ", row.names=1) #args$i
exon <- exon %>% select(contains("_rep")) %>% as.matrix()
intron <- intron %>% select(contains("_rep")) %>% as.matrix()
#### Run EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
# Format conditions for each sample
cond <- gsub("_RNAseq_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
#### Visualisation ####
# MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
theme_bw()
# Save output
png("../processed/eisaMAplot.png")
print(MAplot)
dev.off()
res_eisar$tab.ExIn %>% arrange(FDR) %>% write.table(file="../processed/DEstats.txt", sep="\t", row.names=TRUE, col.names=TRUE)
exon
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(argparser)
})
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
exon <- read.table("../processed/ExonicCounts_THAP_HEK_barbara.txt", header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table("../processed/IntronicCounts_THAP_HEK_barbara.txt", header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains("_rep")) %>% as.matrix()
intron <- intron %>% select(contains("_rep")) %>% as.matrix()
#### Run EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
# Format conditions for each sample
cond <- gsub("_RNAseq_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
#### Visualisation ####
# MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
theme_bw()
# Save output
png("../processed/eisaMAplot.png")
print(MAplot)
dev.off()
res_eisar$tab.ExIn %>% arrange(FDR) %>% write.table(file="../processed/DEstats.txt", sep="\t", row.names=TRUE, col.names=TRUE)
seqlevels(txdb)
seqlevels0(txdb)
seqlevels(txdb)
#### Packages ####
suppressPackageStartupMessages({
library(QuasR)
library(eisaR)
library(GenomicFeatures)
library(argparser)
})
seqlevels(Hsapiens)
#### Packages ####
suppressPackageStartupMessages({
library(QuasR)
library(eisaR)
library(GenomicFeatures)
library(argparser)
library(BSgenome.Hsapiens.UCSC.hg38)
})
seqlevels(Hsapiens)
#### Packages ####
library(GenomicFeatures)
txdb <- makeTxDbFromEnsembl(organism="Homo sapiens",
release=89,
circ_seqs=NULL,
server="ensembldb.ensembl.org",
username="anonymous", password=NULL, port=0L,
tx_attrib=NULL)
seqlevels(txdb) <- "chr1"
seqlevels(txdb, value="chr1")
seqlevels(txdb) <- c("chr1")
typeof(seqlevels(txdb))
typeof(c("a", "b"))
excludedChrom <- c("CHR_HG107_PATCH",
"CHR_HG109_PATCH",
"CHR_HG126_PATCH",
"CHR_HG1277_PATCH",
"CHR_HG1296_PATCH",
"CHR_HG1298_PATCH",
"CHR_HG1299_PATCH",
"CHR_HG1309_PATCH",
"CHR_HG1311_PATCH",
"CHR_HG1320_PATCH",
"CHR_HG1342_HG2282_PATCH",
"CHR_HG1362_PATCH",
"CHR_HG1384_PATCH",
"CHR_HG1395_PATCH",
"CHR_HG1398_PATCH",
"CHR_HG142_HG150_NOVEL_TEST",
"CHR_HG1445_PATCH",
"CHR_HG1466_PATCH",
"CHR_HG1485_PATCH",
"CHR_HG1506_PATCH",
"CHR_HG1507_PATCH",
"CHR_HG1509_PATCH",
"CHR_HG151_NOVEL_TEST",
"CHR_HG1521_PATCH",
"CHR_HG1523_PATCH",
"CHR_HG1524_PATCH",
"CHR_HG1531_PATCH",
"CHR_HG1535_PATCH",
"CHR_HG1651_PATCH",
"CHR_HG1708_PATCH",
"CHR_HG1815_PATCH",
"CHR_HG1817_1_PATCH",
"CHR_HG1832_PATCH",
"CHR_HG1_PATCH",
"CHR_HG2002_PATCH",
"CHR_HG2021_PATCH",
"CHR_HG2022_PATCH",
"CHR_HG2023_PATCH",
"CHR_HG2030_PATCH",
"CHR_HG2046_PATCH",
"CHR_HG2047_PATCH",
"CHR_HG2057_PATCH",
"CHR_HG2058_PATCH",
"CHR_HG2060_PATCH",
"CHR_HG2062_PATCH",
"CHR_HG2063_PATCH",
"CHR_HG2066_PATCH",
"CHR_HG2067_PATCH",
"CHR_HG2068_PATCH",
"CHR_HG2072_PATCH",
"CHR_HG2087_PATCH")
seqlevels(txdb) <- seqlevels("txdb")[!seqlevels("txdb") %in% excludedChrom]
seqlevels(txdb) <- seqlevels(txdb)[!seqlevels(txdb) %in% excludedChrom]
seqlevels(txdb)
[!seqlevels(txdb) %in% excludedChrom]
!seqlevels(txdb) %in% excludedChrom
!excludedChrom %in% seqlevels(txdb)
!seqlevels(txdb) %in% excludedChrom
sum(!excludedChrom %in% seqlevels(txdb))
length(seqlevels(txdb))
length(seqlevels(txdb)[!seqlevels(txdb) %in% excludedChrom])
!(seqlevels(txdb) %in% excludedChrom)
length(seqlevels(txdb)[!(seqlevels(txdb) %in% excludedChrom)])
#### Packages ####
library(GenomicFeatures)
txdb <- makeTxDbFromEnsembl(organism="Homo sapiens",
release=89,
circ_seqs=NULL,
server="ensembldb.ensembl.org",
username="anonymous", password=NULL, port=0L,
tx_attrib=NULL)
length(seqlength(txcdb))
length(seqlength(txdb))
length(seqlengths(txdb))
1:23
chroms <- c(1:22, "X", "Y")
chroms <- paste("chr", chroms, sep="")
chroms
exon <- read.table("./processed/ExonicCounts.txt", header=TRUE, sep=" ", row.names=1) # args$e
intron <- read.table("./processed/IntronicCounts.txt", header=TRUE, sep=" ", row.names=1) #args$i
write.table(exon, file="processed/ExonicCounts.txt", row.names=TRUE, col.names=TRUE, sep="\t")
write.table(intron, file="processed/IntronicCounts.txt", row.names=TRUE, col.names=TRUE, sep="\t")
setwd("/Users/Pomato/mrc/project/sita/")
exon <- read.table("./processed/ExonicCounts.txt", header=TRUE, sep=" ", row.names=1) # args$e
intron <- read.table("./processed/IntronicCounts.txt", header=TRUE, sep=" ", row.names=1) #args$i
write.table(exon, file="processed/ExonicCounts.txt", row.names=TRUE, col.names=TRUE, sep="\t")
write.table(intron, file="processed/IntronicCounts.txt", row.names=TRUE, col.names=TRUE, sep="\t")
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
exon <- read.table("./processed/ExonicCounts.txt", header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table("./processed/IntronicCounts.txt", header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains("_rep")) %>% as.matrix()
intron <- intron %>% select(contains("_rep")) %>% as.matrix()
#### Run EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with â‰¥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format conditions for each sample
cond <- gsub("_RNAseq_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
#### Visualisation ####
# MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
theme_bw()
ngenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
message("No. of significant DE genes (FDR < 0.05): ", ngenes)
# Save output
png("./processed/eisaMAplot.png")
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR)
write.table(deGenes, file="./processed/DEstats.txt", sep="\t", row.names=TRUE, col.names=TRUE)
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
exon <- read.table("./processed/ExonicCounts_THAP_HEK_barbara.txt", header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table("./processed/IntronicCounts_THAP_HEK_barbara.txt", header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains("_rep")) %>% as.matrix()
intron <- intron %>% select(contains("_rep")) %>% as.matrix()
#### Run EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with â‰¥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format conditions for each sample
cond <- gsub("_RNAseq_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
#### Visualisation ####
# MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
theme_bw()
ngenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
message("No. of significant DE genes (FDR < 0.05): ", ngenes)
# Save output
png("./processed/eisaMAplot.png")
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR)
write.table(deGenes, file="./processed/DEstats.txt", sep="\t", row.names=TRUE, col.names=TRUE)
#### Packages ####
library(stringr)
library(glue)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
barbaraRes <- read.table("./processed/DEstats_barbara.txt", header=TRUE, sep="\t", row.names=1)
currentRes <- read.table("./processed/DEstats_xwy.txt", header=TRUE, sep="\t", row.names=1)
#### Checks ####
barbaraGenes <- rownames(barbaraRes)
currentGenes <- rownames(currentRes)
barbaraGenes <- gsub("\\.[0-9]+", "", barbaraGenes)
currentGenes <- gsub("\\.[0-9]+", "", currentGenes)
overlaps <- intersect(barbaraGenes, currentGenes)
nonoverlaps <- setdiff(barbaraGenes, currentGenes)
length(barbaraGenes[!(barbaraGenes %in% currentGenes)])
glue("No. of overlapping genes: {length(overlaps)}")
glue("No. of non-overlapping genes: {length(nonoverlaps)}")
#### Downstream analysis ####
library(dplyr)
#### Packages ####
library(stringr)
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
barbaraRes <- read.table("./processed/DEstats_barbara.txt", header=TRUE, sep="\t", row.names=1)
currentRes <- read.table("./processed/DEstats_xwy.txt", header=TRUE, sep="\t", row.names=1)
#### Checks ####
barbaraGenes <- rownames(barbaraRes %>% filter(FDR < 0.05))
currentGenes <- rownames(currentRes %>% filter(FDR < 0.05))
barbaraGenes <- gsub("\\.[0-9]+", "", barbaraGenes)
currentGenes <- gsub("\\.[0-9]+", "", currentGenes)
overlaps <- intersect(barbaraGenes, currentGenes)
nonoverlaps <- setdiff(barbaraGenes, currentGenes)
glue("No. of overlapping genes: {length(overlaps)}")
glue("No. of non-overlapping genes: {length(nonoverlaps)}")
#### Downstream analysis ####
#### Packages ####
library(stringr)
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
barbaraRes <- read.table("./processed/DEstats_barbara.txt", header=TRUE, sep="\t", row.names=1)
currentRes <- read.table("./processed/DEstats_xwy.txt", header=TRUE, sep="\t", row.names=1)
#### Checks ####
barbaraSigRes <- barbaraRes %>% filter(FDR < 0.05)
currentSigRes %>% filter(FDR < 0.05)
barbaraGenes <- rownames(barbaraSigRes)
currentGenes <- rownames(currentSigRes)
barbaraGenes <- gsub("\\.[0-9]+", "", barbaraGenes)
currentGenes <- gsub("\\.[0-9]+", "", currentGenes)
overlaps <- intersect(barbaraGenes, currentGenes)
nonoverlaps <- setdiff(barbaraGenes, currentGenes)
glue("No. of overlapping genes: {length(overlaps)}")
glue("No. of non-overlapping genes: {length(nonoverlaps)}")
#### Downstream analysis ####
#### Packages ####
library(stringr)
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
barbaraRes <- read.table("./processed/DEstats_barbara.txt", header=TRUE, sep="\t", row.names=1)
currentRes <- read.table("./processed/DEstats_xwy.txt", header=TRUE, sep="\t", row.names=1)
#### Checks ####
barbaraSigRes <- barbaraRes %>% filter(FDR < 0.05)
currentSigRes <- currentRes %>% filter(FDR < 0.05)
barbaraGenes <- rownames(barbaraSigRes)
currentGenes <- rownames(currentSigRes)
barbaraGenes <- gsub("\\.[0-9]+", "", barbaraGenes)
currentGenes <- gsub("\\.[0-9]+", "", currentGenes)
overlaps <- intersect(barbaraGenes, currentGenes)
nonoverlaps <- setdiff(barbaraGenes, currentGenes)
glue("No. of overlapping genes: {length(overlaps)}")
glue("No. of non-overlapping genes: {length(nonoverlaps)}")
#### Downstream analysis ####
#### Packages ####
suppressPackageStartupMessages({
library(edgeR)
library(eisaR)
library(ggplot2)
library(dplyr)
library(argparser)
})
setwd("/Users/Pomato/mrc/project/sita/")
#### Parser ####
# p <- arg_parser("Exon-Intron Split Analysis (EISA)")
#
# p <- add_argument(p, "-e", help="path to exon counts file")
# p <- add_argument(p, "-i", help="path to intron counts file")
#
# args <- parse_args(p)
#
# # Check if arguments are provided
# stopifnot(!is.null(args$e),
#           !is.null(args$i))
#### Load counts files ####
exon <- read.table("./processed/ExonicCounts.txt", header=TRUE, sep="\t", row.names=1) # args$e
intron <- read.table("./processed/IntronicCounts.txt", header=TRUE, sep="\t", row.names=1) #args$i
exon <- exon %>% select(contains("_rep")) %>% as.matrix()
intron <- intron %>% select(contains("_rep")) %>% as.matrix()
#### Run EISA ####
# Filter for genes which have both exons and introns counted
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with â‰¥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh)/colSums(allsh)
summary(fracIn)
# Format conditions for each sample
cond <- gsub("_RNAseq_rep[0-9]*.*", "", colnames(exonsh))
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
# Flip logFC
res_eisar$tab.ExIn$logFC <- -(res_eisar$tab.ExIn$logFC)
#### Visualisation ####
# MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < 0.05),
color="red") +
theme_bw()
ngenes <- nrow(res_eisar$tab.ExIn %>% filter(FDR < 0.05))
message("No. of significant DE genes (FDR < 0.05): ", ngenes)
# Save output
png("./processed/eisaMAplot.png")
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR)
write.table(deGenes, file="./processed/DEstats.txt", sep="\t", row.names=TRUE, col.names=TRUE)
#### Packages ####
library(stringr)
library(glue)
library(dplyr)
#### Load data ####
setwd("/Users/Pomato/mrc/project/sita")
barbaraRes <- read.table("./processed/DEstats_barbara.txt", header=TRUE, sep="\t", row.names=1)
currentRes <- read.table("./processed/DEstats.txt", header=TRUE, sep="\t", row.names=1)
#### Checks ####
barbaraSigRes <- barbaraRes %>% filter(FDR < 0.05)
currentSigRes <- currentRes %>% filter(FDR < 0.05)
barbaraGenes <- rownames(barbaraSigRes)
currentGenes <- rownames(currentSigRes)
barbaraGenes <- gsub("\\.[0-9]+", "", barbaraGenes)
currentGenes <- gsub("\\.[0-9]+", "", currentGenes)
overlaps <- intersect(barbaraGenes, currentGenes)
nonoverlaps <- setdiff(barbaraGenes, currentGenes)
glue("No. of overlapping sig. genes: {length(overlaps)}")
glue("No. of non-overlapping sig. genes: {length(nonoverlaps)}")
#### Downstream analysis ####
